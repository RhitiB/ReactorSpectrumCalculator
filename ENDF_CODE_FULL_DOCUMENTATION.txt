##This code demonstrates the total extraction of the ENDF databases##

##Reading the data from the ENDF online site##

##STEP-1##

import requests
import os
os.chdir(r"/home/rhiti/Desktop/python/95Y_corrected")
import matplotlib.pyplot as plt
import numpy as np
from bs4 import BeautifulSoup


output_file = 'ENDF_FILE_READER.txt'

# Iterate over the range of sect IDs
for sect_id in range(8930183, 8937857):
    url = 'https://www-nds.iaea.org/exfor/servlet/E4sGetSect?SectID={}'.format(sect_id)

    # Send a GET request to the URL
    response = requests.get(url)

    # Check if the response is successful (status code 200)
    if response.status_code == 200:
        # Get the content from the response
        content = response.content.decode('utf-8')

        # Write the sect ID and content to the output file
        with open(output_file, 'a') as f:
            f.write("Sect ID: {}\n".format(sect_id))
            f.write(content)
            f.write('\n---\n')  # Add a separator between each section

# Print a message indicating the process is completed
print("Values saved to '{}'".format(output_file))


##STEP-2##

##This code extracted the decay elements and matched with the element data##

##This code is long because it is repeated for each and individual text files###

import re
import os
import numpy as np
import matplotlib.pyplot as plt
import requests
from bs4 import BeautifulSoup
import time
import webbrowser

os.chdir(r"/home/rhiti/Desktop/python/95Y_corrected")
#%%
'''Appending the element names to the list element_names'''
with open("Cum_Fission_241Pu.txt", "r") as file1:
   element_names=[]
   for line in file1:
       columns = line.split()

        # Get the first column
       first_column = columns[0]

        # Add the first column to the list
       element_names.append(first_column.strip("/n"))

#Print the combined elements
#print(element_names)

#%%

'''Printing the data of the matching elements'''

'''with open ("ENDF_FILE_READER_1.txt", "r") as file1:
    content=file1.read().replace(" ", "")
    for element in element_names:
        if element.replace(" ", "")in content:
            print(f"Element'{element}' found in the text file")'''
        #%%
'''with open ("ENDF_FILE_READER_2.txt", "r") as file1:
    content=file1.read().replace(" ", "")
    for element in element_names:
        if element.replace(" ", "")in content:
            
            print(f"Element'{element}' found in the text file") 
            
            #%%
    with open ("ENDF_FILE_READER_3.txt", "r") as file1:
    content=file1.read().replace(" ", "")
    for element in element_names:
        if element.replace(" ", "")in content:
            print(f"Element'{element}' found in the text file") '''            

#%%
output_file = "Elements Matched Data_1.txt"
with open("ENDF_FILE_READER_1.txt", "r") as file1, open(output_file, "w") as file_out:
    lines1 = file1.readlines()
    id_counter=0
    i=0
    for element in element_names:
        element = element.replace(" ", "")
        found = False  # Flag to track if element is found
        sectId = ""  # Initialize sectId to an empty string
        if element.endswith("-M"):
            element_without_m = element.replace("-M", "M")
            for i in range(len(lines1)):
                line_without_spaces = lines1[i].replace(" ", "")
                if element_without_m in line_without_spaces:
                    sectId_index = i - 5  # Assuming sectId is 4 lines before the element name
                    if sectId_index >= 0:
                        sectId = lines1[sectId_index].strip()
                        found = True
                        break
        else:
            for i in range(len(lines1)):
                line_without_spaces = lines1[i].replace(" ", "")
                if element in line_without_spaces:
                    sectId_index = i - 5  # Assuming sectId is 4 lines before the element name
                    if sectId_index >= 0:
                        sectId = lines1[sectId_index].strip()
                        found = True
                        break
        if found:
            sect_id_numeric = re.findall(r'\d+', sectId)[0]  # Extract numeric part of the sectId
            sect_id_numeric = int(sect_id_numeric)
            if sect_id_numeric % 2 == 1:  # Check if element ID is odd
                print(sect_id_numeric)
                file_out.write(f"{sectId}\n")
                file_out.write(f"Element Name: {element}\n")
            if (sect_id_numeric+1) % 2 == 0:  # Element data (even ID)
                print(sect_id_numeric+1)
                file_out.write(f"Element Data:{sect_id_numeric+1}\n")
                next_sect_id_lines = []
                for i in range(lines1.index("Sect ID: "+str(sect_id_numeric + 1)+"\n")+1, len(lines1)):
                    line = lines1[i]
                    if line.strip() == "":
                        break
                    next_sect_id_lines.append(line)
                file_out.writelines(next_sect_id_lines)
            file_out.write("\n")
            
print("--------------------Finished----------------------------")        
                
#%%
                
output_file = "Elements Matched Data_2.txt"  # Name of the output file
with open("ENDF_FILE_READER_2.txt", "r") as file1, open(output_file, "w") as file_out:
    lines1 = file1.readlines()
    id_counter=0
    i=0
    for element in element_names:
        element = element.replace(" ", "")
        found = False  # Flag to track if element is found
        sectId = ""  # Initialize sectId to an empty string
        if element.endswith("-M"):
            element_without_m = element.replace("-M", "M")
            for i in range(len(lines1)):
                line_without_spaces = lines1[i].replace(" ", "")
                if element_without_m in line_without_spaces:
                    sectId_index = i - 5  # Assuming sectId is 4 lines before the element name
                    if sectId_index >= 0:
                        sectId = lines1[sectId_index].strip()
                        found = True
                        break
        else:
            for i in range(len(lines1)):
                line_without_spaces = lines1[i].replace(" ", "")
                if element in line_without_spaces:
                    sectId_index = i - 5  # Assuming sectId is 4 lines before the element name
                    if sectId_index >= 0:
                        sectId = lines1[sectId_index].strip()
                        found = True
                        break
        if found:
            sect_id_numeric = re.findall(r'\d+', sectId)[0]  # Extract numeric part of the sectId
            sect_id_numeric = int(sect_id_numeric)
            if sect_id_numeric % 2 == 1:  # Check if element ID is odd
                print(sect_id_numeric)
                file_out.write(f"{sectId}\n")
                file_out.write(f"Element Name: {element}\n")
            if (sect_id_numeric+1) % 2 == 0:  # Element data (even ID)
                print(sect_id_numeric+1)
                file_out.write(f"Element Data:{sect_id_numeric+1}\n")
                next_sect_id_lines = []
                for i in range(lines1.index("Sect ID: "+str(sect_id_numeric + 1)+"\n")+1, len(lines1)):
                    line = lines1[i]
                    if line.strip() == "":
                        break
                    next_sect_id_lines.append(line)
                file_out.writelines(next_sect_id_lines)
            file_out.write("\n")
            
print("--------------------Finished----------------------------")          

#%%
output_file = "Elements Matched Data_3.txt"  # Name of the output file

with open("ENDF_FILE_READER_3.txt", "r") as file1, open(output_file, "w") as file_out:
    lines1 = file1.readlines()
    id_counter=0
    i=0
    for element in element_names:
        element = element.replace(" ", "")
        found = False  # Flag to track if element is found
        sectId = ""  # Initialize sectId to an empty string
        if element.endswith("-M"):
            element_without_m = element.replace("-M", "M")
            for i in range(len(lines1)):
                line_without_spaces = lines1[i].replace(" ", "")
                if element_without_m in line_without_spaces:
                    sectId_index = i - 5  # Assuming sectId is 4 lines before the element name
                    if sectId_index >= 0:
                        sectId = lines1[sectId_index].strip()
                        found = True
                        break
        else:
            for i in range(len(lines1)):
                line_without_spaces = lines1[i].replace(" ", "")
                if element in line_without_spaces:
                    sectId_index = i - 5  # Assuming sectId is 4 lines before the element name
                    if sectId_index >= 0:
                        sectId = lines1[sectId_index].strip()
                        found = True
                        break
        if found:
            sect_id_numeric = re.findall(r'\d+', sectId)[0]  # Extract numeric part of the sectId
            sect_id_numeric = int(sect_id_numeric)
            if sect_id_numeric % 2 == 1:  # Check if element ID is odd
                print(sect_id_numeric)
                file_out.write(f"{sectId}\n")
                file_out.write(f"Element Name: {element}\n")
            if (sect_id_numeric+1) % 2 == 0:  # Element data (even ID)
                print(sect_id_numeric+1)
                file_out.write(f"Element Data:{sect_id_numeric+1}\n")
                next_sect_id_lines = []
                for i in range(lines1.index("Sect ID: "+str(sect_id_numeric + 1)+"\n")+1, len(lines1)):
                    line = lines1[i]
                    if line.strip() == "":
                        break
                    next_sect_id_lines.append(line)
                file_out.writelines(next_sect_id_lines)
            file_out.write("\n")
            
print("--------------------Finished----------------------------")

#STEP-3

#The ENDF databse has data stored in two different structures. I have defined the structures as First structure and second structure

import os
#os.chdir(r"D:\Python_2\ENDF_FILE_READER")
import matplotlib.pyplot as plt
import scipy.integrate as integrate
from scipy.integrate import quad
import math
import numpy as np

#%%
input_file = r"D:\Python_2\ENDF_FILE_READER\Elements_Matched_Data_1.txt"
output_file = "Extracted_Elements_Beta_Decay_data_xxx.txt"
start_extraction = False
target_line_1 = "1.000000+0 1.000000+0"
target_line_2 = "1.000000+0 2.000000+0"
found_target_1 = False
found_target_2 = False
prev_to_target_line_1 = None
prev_to_target_line_2 = None

#%%
with open(input_file, "r") as file_in, open(output_file, "w") as file_out:
    prev_line = None

    for line in file_in:
        if line.startswith("Sect ID: "):
            sect_id = line.strip().split(":")[1].strip()
            file_out.write("\nSect ID: " + sect_id + "\n")
        elif line.startswith("Element Name: "):
            element_name = line.strip().split(":")[1].strip()
            file_out.write("Element Name: " + element_name + "\n")
        elif line.startswith("Element Data:"):
            element_data = line.strip().split(":")[1].strip()
            # Replace plus and minus signs with "E" in the element_data
            #element_data = element_data.replace('+', 'E+').replace('-', 'E-')
            file_out.write("Element Data: " + element_data + "\n")

        if not start_extraction:
            if target_line_1 in line:
                found_target_1 = True
                target_elements = line.strip().split()[2:4]
                target_elements = [element.replace('+', 'e+').replace('-', 'E-') for element in target_elements]
                prev_to_target_line_1 = prev_line  # Store the line before the target line
                if prev_to_target_line_1:
                        prev_line_elements = prev_to_target_line_1.strip().split()
                        if len(prev_line_elements) >= 2:
                            # Replace plus and minus signs with "E" in the elements
                            prev_line_elements[0] = prev_line_elements[0].replace('+', 'E+').replace('-', 'E-')
                            prev_line_elements[1] = prev_line_elements[1].replace('+', 'E+').replace('-', 'E-')

                            # Write the 1st, 2nd, 3rd, and 4th elements to the output file
                file_out.write(prev_line_elements[0] + " " + prev_line_elements[1] + " ")
                file_out.write(target_elements[0] + " " + target_elements[1] + "\n")

                found_target_1 = not found_target_1  # Toggle the flag after each occurrence
                prev_to_target_line_1 = prev_line              
                
            #Condition for target line 2
        
            if target_line_2 in line:
                found_target_2 = True
                prev_to_target_line_2 = prev_line
                target_elements = line.strip().split()[2:4]
                #target_elements = [element.replace('+', 'e+').replace('-', 'e-') for element in target_elements]
                prev_to_target_line_2 = prev_line  # Store the line before the target line
            elif found_target_2:
                
                prev_line_elements = prev_to_target_line_2.strip().split()
                if len(prev_line_elements) >= 2:
                            # Replace plus and minus signs with "E" in the elements
                            prev_line_elements[0] = prev_line_elements[0].replace('+', 'E+').replace('-', 'E-')
                            prev_line_elements[1] = prev_line_elements[1].replace('+', 'E+').replace('-', 'E-')
                            target_elements[0] = target_elements[0].replace('+', 'E+').replace('-', 'E-')
                            target_elements[1] = target_elements[1].replace('+', 'E+').replace('-', 'E-')  
                            # Write the 1st, 2nd, 3rd, and 4th elements to the output file
                            file_out.write(prev_line_elements[0] + " " + prev_line_elements[1] + " "+ target_elements[0] + " " + target_elements[1] + "\n")

                found_target_2 = not found_target_2  # Toggle the flag after each occurrence
                prev_to_target_line_2 = prev_line  # Store the current line as the previous line for target_line_2
                
            elif found_target_1 or found_target_2:
                file_out.write(line)
            
        # Store the current line as the previous line for the next iteration'''
            prev_line = line


            
    #STEP-4

##This code is for individial first strutcture which I have wrote ###


#CODE FOR FIRST STRUCTURE 

import os

#os.chdir(r"D:\Python_2\ENDF_FILE_READER")
input_file = "Elements_Matched_Data_1.txt"
output_file = "Extracted_Elements_Beta_Decay_data_xxxxxx.txt"

n = 3  # Number of lines to skip at the end

lines_to_write = []
start_extraction = False
extraction_count = 0
#print("testeo")
with open(input_file, "r") as file_in, open(output_file, "w") as file_out:
    for line in file_in:
        if line.startswith("Sect ID: "):
            if start_extraction:
                start_extraction = False
                extraction_count = 0
                # Write the extracted lines to the output file with the desired format
                for i, l in enumerate(lines_to_write):
                    if i % 2 == 0:  # Write the data and skip every other line (odd lines)
                        elements = l.strip().split()
                        formatted_columns = []
                        for col in elements[0:6]:
                            if '.' in col:
                                formatted_columns.append(col.rjust(18))
                            else:
                                formatted_columns.append(col.rjust(11))
                        formated_columns_final=(" ".join(formatted_columns)).strip().split()
                        #file_out.write(" ".join(formatted_columns) + "\n")
                        #print(formated_columns_final[0])
                        if (len(formated_columns_final) == 6):
                            file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                            file_out.write(formated_columns_final[2]+ "  " + formated_columns_final[3] + "\n")
                            file_out.write(formated_columns_final[4]+ "  " + formated_columns_final[5] + "\n")
                        elif (len(formated_columns_final) == 5):
                            file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                            file_out.write(formated_columns_final[2]+ "  " + formated_columns_final[3] + "\n")
                            file_out.write(formated_columns_final[4]+ "  " + "\n")
                        elif (len(formated_columns_final) == 4):
                            file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                            file_out.write(formated_columns_final[2]+ "  " + formated_columns_final[3] + "\n")
                        elif (len(formated_columns_final) == 3):
                            file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                            file_out.write(formated_columns_final[2]+ "  " + "\n")
                        elif (len(formated_columns_final) == 2):
                            file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                file_out.write("\n")  # Add a new line between elements
                lines_to_write = []

            sect_id = line.strip().split(":")[1].strip()
            file_out.write("\nSect ID: " + sect_id + "\n")
        elif line.startswith("Element Name: "):
            element_name = line.strip().split(":")[1].strip()
            file_out.write("Element Name: " + element_name + "\n")
        elif line.startswith("Element Data:"):
            element_data = line.strip().split(":")[1].strip()
            file_out.write("Element Data: " + element_data + "\n")
            extraction_count = 0  # Reset extraction_count when "Element Data" is found
        elif line.startswith(" 2.500000+3"):
            if extraction_count == 1:
                start_extraction = True
            extraction_count += 1
        elif (extraction_count>1) and (extraction_count<3) and (line.startswith(" 0.000000+0")):
            extraction_count += 1

        if start_extraction and extraction_count == 2:
            lines_to_write.append(line)

    # Write the extracted lines to the output file for the last element
    if start_extraction and extraction_count == 2:
        for i, l in enumerate(lines_to_write):
            if i % 2 == 0:  # Write the data and skip every other line (odd lines)
                elements = l.strip().split()
                formatted_columns = []
                print(elements[0])
                for col in elements[0:6]:
                    if '.' in col:
                        formatted_columns.append(col.rjust(18))
                    else:
                        formatted_columns.append(col.rjust(11))
                formated_columns_final=(" ".join(formatted_columns)).strip().split()
                #file_out.write(" ".join(formatted_columns) + "\n")
                if (len(formated_columns_final) == 6):
                    file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                    file_out.write(formated_columns_final[2]+ "  " + formated_columns_final[3] + "\n")
                    file_out.write(formated_columns_final[4]+ "  " + formated_columns_final[5] + "\n")
                elif (len(formated_columns_final) == 5):
                    file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                    file_out.write(formated_columns_final[2]+ "  " + formated_columns_final[3] + "\n")
                    file_out.write(formated_columns_final[4]+ "  " + "\n")
                elif (len(formated_columns_final) == 4):
                    file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                    file_out.write(formated_columns_final[2]+ "  " + formated_columns_final[3] + "\n")
                elif (len(formated_columns_final) == 3):
                    file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
                    file_out.write(formated_columns_final[2]+ "  " + "\n")
                elif (len(formated_columns_final) == 2):
                    file_out.write(formated_columns_final[0]+ "  " + formated_columns_final[1] + "\n")
        #file_out.write(" ".join(joint_columns_1) + "\n")

##CODE FOR THE SECOND STRUCTURE##

import os
os.chdir(r"D:\Python_2\ENDF_FILE_READER")
import matplotlib.pyplot as plt
import scipy.integrate as integrate
from scipy.integrate import quad
import math
import numpy as np

#%%
input_file = r"D:\Python_2\ENDF_FILE_READER\Elements_Matched_Data_1.txt"
output_file = "Extracted_Elements_Beta_Decay_data_dsnnldsnclsc.txt"
start_extraction = False
target_line_1 = "1.000000+0 1.000000+0"
target_line_2 = "1.000000+0 2.000000+0"
found_target_1 = False
found_target_2 = False
prev_to_target_line_1 = None
prev_to_target_line_2 = None

#%%
with open(input_file, "r") as file_in, open(output_file, "w") as file_out:
    prev_line = None

    for line in file_in:
        if line.startswith("Sect ID: "):
            sect_id = line.strip().split(":")[1].strip()
            file_out.write("\nSect ID: " + sect_id + "\n")
        elif line.startswith("Element Name: "):
            element_name = line.strip().split(":")[1].strip()
            file_out.write("Element Name: " + element_name + "\n")
        elif line.startswith("Element Data:"):
            element_data = line.strip().split(":")[1].strip()
            # Replace plus and minus signs with "E" in the element_data
            element_data = element_data.replace('+', 'E').replace('-', 'E')
            file_out.write("Element Data: " + element_data + "\n")

        if not start_extraction:
            if target_line_1 in line:
                if found_target_1:
                    # Extract the 3rd and 4th elements from the target line
                    target_elements = line.strip().split()[2:4]
                    target_elements = [element.replace('+', 'e').replace('-', 'e') for element in target_elements]

                    if prev_to_target_line_1:
                        prev_line_elements = prev_to_target_line_1.strip().split()
                        if len(prev_line_elements) >= 2:
                            # Replace plus and minus signs with "E" in the elements
                            prev_line_elements[0] = prev_line_elements[0].replace('+', 'e').replace('-', 'e')
                            prev_line_elements[1] = prev_line_elements[1].replace('+', 'e').replace('-', 'e')

                            # Write the 1st, 2nd, 3rd, and 4th elements to the output file
                            file_out.write(prev_line_elements[0] + " " + prev_line_elements[1] + " ")
                            file_out.write(target_elements[0] + " " + target_elements[1] + "\n")

                found_target_1 = not found_target_1  # Toggle the flag after each occurrence
                prev_to_target_line_1 = prev_line  # Store the current line as the previous line for target_line_1

            if target_line_2 in line:
                if found_target_2:
                    # Extract the 3rd and 4th elements from the target line
                    target_elements = line.strip().split()[2:4]
                    target_elements = [element.replace('+', 'e').replace('-', 'e') for element in target_elements]

                    if prev_to_target_line_2:
                        prev_line_elements = prev_to_target_line_2.strip().split()
                        if len(prev_line_elements) >= 2:
                            # Replace plus and minus signs with "E" in the elements
                            prev_line_elements[0] = prev_line_elements[0].replace('+', 'e').replace('-', 'e')
                            prev_line_elements[1] = prev_line_elements[1].replace('+', 'e').replace('-', 'e')

                            # Write the 1st, 2nd, 3rd, and 4th elements to the output file
                            file_out.write(prev_line_elements[0] + " " + prev_line_elements[1] + "\n")
                            file_out.write(target_elements[0] + " " + target_elements[1] + "\n")

                found_target_2 = not found_target_2  # Toggle the flag after each occurrence
                prev_to_target_line_2 = prev_line  # Store the current line as the previous line for target_line_2

        elif found_target_1 or found_target_2:
            file_out.write(line)

        prev_line = line
############################################################################################################################################################################



        
          


